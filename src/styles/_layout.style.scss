//grid gap
:root {
  --grid-gap: 10px;
}
$gap-horizontal: var(--grid-gap);
$gap-vertical: $gap-horizontal;
$grid-columns: 12;

//   ===== Layout 1: 2D arrangement same width container
@mixin grid {
  @supports (grid-area: auto) {
    display: grid;
    grid-column-gap: $gap-horizontal;
    grid-row-gap: $gap-vertical;
  }
}

@mixin gridAuto($min-width) {
  @supports (grid-area: auto) {
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  }
}

// Keep this with layout sandbox
// demo of layout 1
.grid-gallery {
  @include grid;
  @include gridAuto(260px);
  grid-auto-rows: minmax(100px, auto);
}

.grid-gallery > div {
  display: flex;
  align-items: center;
  justify-content: center;

  &:nth-of-type(3n) {
    background-color: #d91b1a;
  }

  &:nth-of-type(3n + 1) {
    background-color: #3a568c;
  }

  &:nth-of-type(3n + 2) {
    background-color: #4f8365;
  }
}

// ============== Layout 2

//flex container definition
.flex-grid {
  display: flex;
  flex-wrap: wrap;
  margin: calc(var(--grid-gap) * -1) 0 0 calc(var(--grid-gap) * -1);
}

//flex item definition
.col {
  box-sizing: border-box;
  padding: calc(var(--grid-gap)) 0 0 calc(var(--grid-gap));
  background-clip: content-box;
  flex-basis: 100%;
}

//round flex items' width
@function round-width($i) {
  $width: floor(100 * $i * 100 / $grid-columns) / 100;
  @return unquote("#{$width}#{"%"}");
}

//utility classes
@for $i from 1 through $grid-columns {
  .col--#{$i} {
    flex-basis: round-width($i);
    max-width: round-width($i);
  }
}

@media only screen and (min-width: 768px) {
  @for $i from 1 through $grid-columns {
    .col--md-#{$i} {
      flex-basis: round-width($i);
      max-width: round-width($i);
    }
  }
}

// Keep this with layout sandbox
//demo style
.col {
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: sans-serif;
  color: white;
  height: 150px;
}

.col:nth-of-type(2n) {
  background-color: #3a568c;
}

.col:nth-of-type(2n + 1) {
  background-color: #4f8365;
}

// ============= layout  3
@mixin gridLayout($cols...) {
  @supports (grid-area: auto) {
    grid-template-columns: repeat($grid-columns, 1fr);

    $i: 1;
    @each $col in $cols {
      > :nth-of-type(#{$i}) {
        grid-column-end: span nth($col, 1);
        @if length($col) > 1 {
          grid-row-end: span nth($col, 2);
        }
      }
      $i: $i + 1;
    }
  }
}

//here's where we use the grid mixins
.layout-varying-height {
  @include grid;
  grid-auto-rows: 120px;

  @media only screen and (min-width: 600px) {
    @include gridLayout((7, 2), (5, 1), (5, 1), (12, 1));
  }
}

// Keep this with layout sandbox
//demo style
.layout-varying-height {
  font-family: sans-serif;
  max-width: 1000px;
  margin: 0 auto;

  > div:nth-of-type(1) {
    background-color: #ead8c2;
  }

  > div:nth-of-type(2) {
    background-color: #4f8365;
  }

  > div:nth-of-type(3) {
    background-color: #eca414;
  }

  > div:nth-of-type(4) {
    background-color: #3a568c;
  }

  > div:not(:first-of-type) {
    color: white;
  }

  > div {
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

//  ============= layout 4

@mixin gridAdvanced($cols...) {
  @supports (grid-area: auto) {
    grid-template-columns: repeat($grid-columns, 1fr);

    $i: 1;
    @each $col in $cols {
      > :nth-of-type(#{$i}) {
        grid-column-start: nth($col, 1);
        grid-column-end: nth($col, 2);
        grid-row-start: nth($col, 3);
        grid-row-end: nth($col, 4);
      }
      $i: $i + 1;
    }
  }
}

//here's where we use the grid mixins
.layout-overlapping {
  @include grid;
  grid-auto-rows: 90px;

  @media only screen and (min-width: 600px) {
    @include gridAdvanced((1, 8, 1, 3), (1, 8, 3, 5), (5, -1, 2, 4));
  }
}

// Keep this with layout sandbox
//demo style
.layout-overlapping {
  font-family: sans-serif;
  max-width: 1000px;
  margin: 0 auto;

  > div:nth-of-type(1) {
    background-color: #ead8c2;
  }

  > div:nth-of-type(2) {
    background-color: #3a568c;
  }

  > div:nth-of-type(3) {
    background-color: #eca414;
    opacity: 0.8;
  }

  > div:not(:first-of-type) {
    color: white;
  }

  > div {
    display: flex;
    justify-content: center;
    align-items: center;
  }
}
